{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport { Input, Button, Icon } from 'react-native-elements';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar LoginScreen = function (_Component) {\n  _inherits(LoginScreen, _Component);\n\n  var _super = _createSuper(LoginScreen);\n\n  function LoginScreen(props) {\n    var _this;\n\n    _classCallCheck(this, LoginScreen);\n\n    _this = _super.call(this, props);\n\n    _this.onLoginPressed = function () {\n      var emailError = emailValidator(_this.state.email);\n      var passwordError = passwordValidator(_this.state.password);\n      var navigate = _this.props.navigation.navigate;\n\n      if (emailError || passwordError) {\n        alert(\"Email ou mot de passe incorrect!\");\n        return;\n      }\n\n      var good = false;\n      var user = null;\n      var db = SQLite.openDatabase(\"database.db\");\n      db.transaction(function (tx) {\n        tx.executeSql(\"select * from user\", [], function (_, _ref) {\n          var rows = _ref.rows;\n\n          for (var i = 0; i < rows.length; i++) {\n            if (rows[i][\"mail\"] == _this.state.email && rows[i][\"mdp\"] == _this.state.password) {\n              good = true;\n              user = rows[i];\n              return navigate('Dashboard', {\n                username: user['name']\n              });\n            }\n          }\n\n          alert(\"Email ou mot de passe incorrect!\");\n        });\n      });\n      var isvalid = false;\n      var user = null;\n    };\n\n    _this.state = {\n      email: \"\",\n      password: \"\"\n    };\n    return _this;\n  }\n\n  _createClass(LoginScreen, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return _jsxs(View, {\n        children: [_jsx(Input, {\n          value: this.state.email,\n          onChangeText: function onChangeText(text) {\n            return _this2.setState({\n              email: text\n            });\n          },\n          placeholder: \"Email\"\n        }), _jsx(Input, {\n          value: this.state.password,\n          onChangeText: function onChangeText(text) {\n            return _this2.setState({\n              password: text\n            });\n          },\n          placeholder: \"Password\",\n          secureTextEntry: true\n        }), _jsx(Button, {\n          title: \"Submit\",\n          loading: false,\n          loadingProps: {\n            size: 'small',\n            color: 'white'\n          },\n          buttonStyle: {\n            backgroundColor: 'rgba(111, 202, 186, 1)',\n            borderRadius: 5\n          },\n          titleStyle: {\n            fontWeight: 'bold',\n            fontSize: 23\n          },\n          containerStyle: {\n            marginHorizontal: 50,\n            height: 50,\n            width: 200,\n            marginVertical: 10\n          },\n          onPress: this.onLoginPressed\n        })]\n      });\n    }\n  }]);\n\n  return LoginScreen;\n}(Component);\n\nexport { LoginScreen as default };\nvar styles = StyleSheet.create({\n  button: {\n    width: '100%',\n    marginVertical: 10,\n    fontWeight: 'bold',\n    fontSize: 40\n  }\n});","map":{"version":3,"sources":["/Users/zhangduo/Documents/formation UHA/React Native/MyFirstApp/monProjet/Screens/LoginScreen.js"],"names":["React","Component","Input","Button","Icon","LoginScreen","props","onLoginPressed","emailError","emailValidator","state","email","passwordError","passwordValidator","password","navigate","navigation","alert","good","user","db","SQLite","openDatabase","transaction","tx","executeSql","_","rows","i","length","username","isvalid","text","setState","size","color","backgroundColor","borderRadius","fontWeight","fontSize","marginHorizontal","height","width","marginVertical","styles","StyleSheet","create","button"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { View,StyleSheet, Text } from 'react-native';\nimport { Input,Button, Icon } from 'react-native-elements';\n\nexport default class LoginScreen extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n        email: \"\",\n        password: \"\"\n    };\n}\n\nonLoginPressed = () =>{\n  const emailError = emailValidator(this.state.email);\n  const passwordError = passwordValidator(this.state.password);\n\n  const {navigate} = this.props.navigation;\n\n  if (emailError || passwordError) {\n      alert(\"Email ou mot de passe incorrect!\");\n      return;\n  }\n  var good = false\n  var user = null;\n\n  const db = SQLite.openDatabase(\"database.db\");\n  //check users\n  db.transaction(\n      tx => {\n          tx.executeSql(\"select * from user\", [], (_, {rows}) =>{\n              for (let i = 0; i < rows.length; i++) {\n                  if(rows[i][\"mail\"] == this.state.email && rows[i][\"mdp\"] == this.state.password){\n                      good = true;\n                      user = rows[i];\n                      return navigate('Dashboard', {username: user['name']});\n                  }\n               }\n               alert(\"Email ou mot de passe incorrect!\");\n          }\n          );\n      }\n  );\n\n  var isvalid = false;\n  var user = null;\n\n};\n\n  render() {\n    return <View>\n      <Input\n        value={this.state.email}\n        onChangeText={text => this.setState({ email: text })}\n        placeholder='Email'\n      />\n      <Input value={this.state.password}\n                    onChangeText={text => this.setState({ password: text })}\n      placeholder=\"Password\" secureTextEntry={true} />\n\n      <Button\n                title=\"Submit\"\n                loading={false}\n                loadingProps={{ size: 'small', color: 'white' }}\n                buttonStyle={{\n                  backgroundColor: 'rgba(111, 202, 186, 1)',\n                  borderRadius: 5,\n                }}\n                titleStyle={{ fontWeight: 'bold', fontSize: 23 }}\n                containerStyle={{\n                  marginHorizontal: 50,\n                  height: 50,\n                  width: 200,\n                  marginVertical: 10,\n                }}\n                onPress={this.onLoginPressed}\n              />\n    </View>\n  }\n}\nconst styles = StyleSheet.create({\n  button: {\n      width: '100%',\n      marginVertical: 10,\n      fontWeight: 'bold',\n      fontSize: 40\n  }\n});\n"]},"metadata":{},"sourceType":"module"}