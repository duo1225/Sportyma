{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport { Input, Button, Icon } from 'react-native-elements';\nimport { emailValidator, passwordValidator, nameValidator } from \"../core/utils\";\nimport * as SQLite from 'expo-sqlite';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar InscriptionScreen = function (_Component) {\n  _inherits(InscriptionScreen, _Component);\n\n  var _super = _createSuper(InscriptionScreen);\n\n  function InscriptionScreen(props) {\n    var _this;\n\n    _classCallCheck(this, InscriptionScreen);\n\n    _this = _super.call(this, props);\n\n    _this.onSignUppPressed = function () {\n      var nameError = nameValidator(_this.state.name);\n      var emailError = emailValidator(_this.state.email);\n      var passwordError = passwordValidator(_this.state.password);\n      var user = [];\n      var db = SQLite.openDatabase(\"database.db\");\n      db.transaction(function (tx) {\n        tx.executeSql(\"create table if not exists user (id integer primary key not null, name text, mail text, mdp text);\");\n      });\n      var navigate = _this.props.navigation.navigate;\n\n      if (emailError || passwordError || nameError) {\n        _this.alerte();\n\n        return;\n      } else {\n        db.transaction(function (tx) {\n          tx.executeSql(\"insert into user (name, mail, mdp) values (?, ?, ?)\", [_this.state.name, _this.state.email, _this.state.password]);\n        });\n        navigate('Dashboard', {\n          username: _this.state.name\n        });\n      }\n    };\n\n    _this.state = {\n      name: \"\",\n      prenom: \"\",\n      email: \"\",\n      password: \"\"\n    };\n    return _this;\n  }\n\n  _createClass(InscriptionScreen, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return _jsxs(View, {\n        children: [_jsx(Input, {\n          value: this.state.name,\n          onChangeText: function onChangeText(text) {\n            return _this2.setState({\n              name: text\n            });\n          },\n          placeholder: \"Nom\"\n        }), _jsx(Input, {\n          value: this.state.prenom,\n          onChangeText: function onChangeText(text) {\n            return _this2.setState({\n              prenom: text\n            });\n          },\n          placeholder: \"Prenom\"\n        }), _jsx(Input, {\n          value: this.state.email,\n          onChangeText: function onChangeText(text) {\n            return _this2.setState({\n              email: text\n            });\n          },\n          placeholder: \"Email\"\n        }), _jsx(Input, {\n          value: this.state.password,\n          onChangeText: function onChangeText(text) {\n            return _this2.setState({\n              password: text\n            });\n          },\n          placeholder: \"Password\",\n          secureTextEntry: true\n        }), _jsx(Button, {\n          title: \"Submit\",\n          loading: false,\n          loadingProps: {\n            size: 'small',\n            color: 'white'\n          },\n          buttonStyle: {\n            backgroundColor: 'rgba(111, 202, 186, 1)',\n            borderRadius: 5\n          },\n          titleStyle: {\n            fontWeight: 'bold',\n            fontSize: 23\n          },\n          containerStyle: {\n            marginHorizontal: 50,\n            height: 50,\n            width: 200,\n            marginVertical: 10\n          },\n          onPress: this.onSignUppPressed\n        })]\n      });\n    }\n  }]);\n\n  return InscriptionScreen;\n}(Component);\n\nexport { InscriptionScreen as default };\nvar styles = StyleSheet.create({\n  button: {\n    width: '100%',\n    marginVertical: 10,\n    fontWeight: 'bold',\n    fontSize: 40\n  }\n});","map":{"version":3,"sources":["/Users/zhangduo/Documents/formation UHA/React Native/MyFirstApp/monProjet/Screens/InscriptionScreen.js"],"names":["React","Component","Input","Button","Icon","emailValidator","passwordValidator","nameValidator","SQLite","InscriptionScreen","props","onSignUppPressed","nameError","state","name","emailError","email","passwordError","password","user","db","openDatabase","transaction","tx","executeSql","navigate","navigation","alerte","username","prenom","text","setState","size","color","backgroundColor","borderRadius","fontWeight","fontSize","marginHorizontal","height","width","marginVertical","styles","StyleSheet","create","button"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { View, StyleSheet,Text } from 'react-native';\nimport { Input, Button,Icon } from 'react-native-elements';\n\nimport {\n  emailValidator,\n  passwordValidator,\n  nameValidator,\n} from '../core/utils';\nimport * as SQLite from 'expo-sqlite'\n\n\n\nexport default class InscriptionScreen extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n        name: \"\",\n        prenom:\"\",\n        email: \"\",\n        password: \"\"\n    };\n}\n\nonSignUppPressed = ()=>{\n  const nameError = nameValidator(this.state.name);\n  const emailError = emailValidator(this.state.email);\n  const passwordError = passwordValidator(this.state.password);\n  var user = [];\n\n  const db = SQLite.openDatabase(\"database.db\");\n  db.transaction(tx => {\n      tx.executeSql(\"create table if not exists user (id integer primary key not null, name text, mail text, mdp text);\");\n  });\n \n  const {navigate} = this.props.navigation;\n  if (emailError || passwordError || nameError) {\n       this.alerte();\n      return;\n  } else {\n      db.transaction(\n          tx => {\n              tx.executeSql(\"insert into user (name, mail, mdp) values (?, ?, ?)\", [this.state.name, this.state.email, this.state.password]);\n          }\n      );\n      navigate('Dashboard', {username: this.state.name});\n  }\n\n};\n\n  render() {\n    return (<View>\n      <Input\n        value={this.state.name}\n        onChangeText={text => this.setState({ name: text })}\n        placeholder='Nom'\n      />\n      <Input\n      value={this.state.prenom}\n      onChangeText={text => this.setState({ prenom: text })}\n        placeholder='Prenom'\n      />\n      <Input\n      value={this.state.email}\n      onChangeText={text => this.setState({ email: text })}\n        placeholder='Email'\n      />\n      <Input \n      value={this.state.password}\n      onChangeText={text => this.setState({ password: text })}\n      placeholder=\"Password\" secureTextEntry={true} />\n\n      <Button\n                title=\"Submit\"\n                loading={false}\n                loadingProps={{ size: 'small', color: 'white' }}\n                buttonStyle={{\n                  backgroundColor: 'rgba(111, 202, 186, 1)',\n                  borderRadius: 5,\n                }}\n                titleStyle={{ fontWeight: 'bold', fontSize: 23 }}\n                containerStyle={{\n                  marginHorizontal: 50,\n                  height: 50,\n                  width: 200,\n                  marginVertical: 10,\n                }}\n                onPress={this.onSignUppPressed}\n              />\n    </View>);\n  }\n}\nconst styles = StyleSheet.create({\n  button: {\n      width: '100%',\n      marginVertical: 10,\n      fontWeight: 'bold',\n      fontSize: 40\n  }\n});"]},"metadata":{},"sourceType":"module"}